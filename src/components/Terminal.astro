---
import TypewriterString from './TypewriterString.astro';

export interface TerminalLine {
  os?: 'windows' | 'linux';
  host?: string;
  prompt?: boolean;
  delay?: string | number;
  line: string;
  suffix?: string;
}

export interface Props {
  class?: string;
  header?: string;
  lines: TerminalLine[];
}

const { class: className, header, lines } = Astro.props;

interface TerminalOutputLine extends TerminalLine {
  lineDelay: string;
  inputDelay: string;
  promptInputDuration: string;
}

const typewriterAnimationLengthPerCharMs = 50;
const defaultWindowsPrompt = 'C:\\Users\\system';
const defaultLinuxPrompt = 'root@localhost';
const delayBetweenPromptSubmissionMs = 500;

let delayMs = 0;
let delayVars = [] as string[];

const outputLines: TerminalOutputLine[] = lines.map((line, i) => {
  const addDelayMs = typeof line.delay === 'number' ? line.delay : 0;
  const addDelayVars = [...delayVars, ...(typeof line.delay === 'string' ? [line.delay] : [])];

  const joinedVars = delayVars.join(' + ');
  const addJoinedVars = addDelayVars.join(' + ');

  try {
    let lineDelay: string, inputDelay: string, promptInputDuration: string;

    if (line.prompt) {
      const inputDelayExpr = `${addDelayMs + delayBetweenPromptSubmissionMs}ms${
        typeof line.delay === 'string' ? ` + ${line.delay}` : ''
      } + ${delayMs}ms${joinedVars ? ' + ' + joinedVars : ''}`;

      promptInputDuration =
        i < lines.length - 1
          ? `calc(${
              typewriterAnimationLengthPerCharMs * line.line.length + delayBetweenPromptSubmissionMs
            }ms + ${inputDelayExpr})`
          : '0';
      lineDelay = `calc(${delayMs}ms${joinedVars ? ' + ' + joinedVars : ''})`;
      inputDelay = `calc(${inputDelayExpr})`;
    } else {
      promptInputDuration = '0';
      lineDelay = `calc(${delayMs + addDelayMs}ms${addJoinedVars ? ' + ' + addJoinedVars : ''})`;
      inputDelay = lineDelay;
    }
    return {
      ...line,
      host: line.host ?? (line.os === 'windows' ? defaultWindowsPrompt : defaultLinuxPrompt),
      lineDelay,
      inputDelay,
      promptInputDuration,
    };
  } finally {
    delayMs +=
      addDelayMs +
      (line.prompt ? typewriterAnimationLengthPerCharMs * line.line.length + delayBetweenPromptSubmissionMs * 2 : 0);
    delayVars = addDelayVars;
  }
});
---

<div class={`terminal ${className ?? ''}`}>
  {
    header && (
      <div class="terminal-header">
        <pre>{header}</pre>
      </div>
    )
  }
  {
    outputLines.map((o) => (
      <p
        class:list={{
          'terminal-prompt': !!o.prompt,
          'terminal-windows': o.os === 'windows',
          'terminal-linux': o.os === 'linux',
        }}
        style={{ '--terminal-line-appear-delay': o.lineDelay }}
      >
        {o.prompt && (
          <span class="terminal-prompt-prefix">
            <span class="terminal-host">{o.host}</span>
            <span class="terminal-host-suffix">
              {o.os === 'windows' ? (
                '>'
              ) : o.os === 'linux' ? (
                <>
                  :<span class="terminal-host-suffix-dir">~</span>#
                </>
              ) : null}
            </span>
          </span>
        )}{' '}
        {o.prompt && (
          <>
            <TypewriterString
              class="terminal-prompt-input"
              string={o.line}
              animationDelay={o.inputDelay}
              animationDurationPerChar={typewriterAnimationLengthPerCharMs}
            />
            <i
              class="terminal-cursor"
              style={{
                '--terminal-line-cursor-disappear-delay': o.promptInputDuration,
              }}
            />
          </>
        )}
        {!o.prompt && (
          <span class="terminal-line" class:list={{ 'terminal-line-split': !!o.suffix }}>
            {(() => {
              const lines = o.line.split('\n');

              const mappedLines = lines.map((l, i, parts) => (
                <>
                  {l
                    .split(' ')
                    .map((l) => {
                      if (/^https?:\/\//.test(l)) {
                        return <a href={l}>{l}</a>;
                      }

                      if (l.startsWith('*') && l.endsWith('*')) {
                        return <b>{l.slice(1, -1)}</b>;
                      }

                      return l;
                    })
                    .reduce((prev: (string | Element)[], curr: string | Element) => {
                      const lastElement = prev[prev.length - 1];

                      if (typeof curr === 'string') {
                        curr = ` ${curr}`;
                      } else if (typeof lastElement === 'string') {
                        prev[prev.length - 1] = lastElement + ' ';
                      }

                      if (typeof lastElement === 'string' && typeof curr === 'string') {
                        prev[prev.length - 1] = lastElement + curr;
                      } else {
                        prev.push(curr);
                      }
                      return prev;
                    }, [])}

                  {i < parts.length - 1 ? <br /> : null}
                </>
              ));

              if (o.suffix) {
                return (
                  <>
                    <span class="terminal-line-prefix">{mappedLines}</span>
                    <span class="terminal-line-suffix">{o.suffix}</span>
                  </>
                );
              }

              return mappedLines;
            })()}
          </span>
        )}
      </p>
    ))
  }
</div>

<style lang="scss">
  @keyframes line-appear {
    0%,
    50% {
      opacity: 0;
      position: absolute;
    }
    100% {
      opacity: 1;
      position: static;
    }
  }

  @keyframes cursor-blink {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes cursor-disappear {
    from {
      visibility: visible;
    }
    to {
      visibility: hidden;
    }
  }

  .terminal {
    padding: var(--padding-xs);
    font-family: 'VT323', monospace;

    background-color: var(--color-background);
    color: black;

    @media (prefers-color-scheme: dark) {
      background-color: black;
      color: white;
    }

    &-header {
      text-align: center;
      margin: var(--padding-xlg) 0 calc(var(--padding-xlg) * 2);

      pre {
        font-size: calc(var(--font-size-xss) * 0.8);
        font-family: monospace;
        font-weight: bold;
        display: inline-block;
        text-align: left;

        @media screen and (max-width: 740px) {
          font-size: calc(var(--font-size-xss) * 0.6);
        }
        @media screen and (max-width: 500px) {
          font-size: calc(var(--font-size-xss) * 0.4);
        }
      }
    }

    p {
      animation: line-appear var(--terminal-line-appear-delay) steps(1, jump-end) forwards;
      font-size: var(--font-size-sm);
      line-height: 1.1;

      @media (prefers-reduced-motion: reduce) {
        animation: none;
      }
    }

    &-prompt {
      margin: var(--padding-sm) 0;
      white-space: nowrap;

      &-prefix {
        display: inline-flex; // Needed merely because Prettier adds whitespace when wrapping HTML elements
      }
    }

    &-cursor {
      --terminal-line-cursor-width: 0.8ch;

      animation:
        cursor-blink 0.75s steps(2, jump-none) infinite,
        cursor-disappear var(--terminal-line-cursor-disappear-delay) steps(2, jump-both) forwards;
      width: var(--terminal-line-cursor-width);
      height: 1em;
      display: inline-block;
      vertical-align: bottom;

      background: black;
      @media (prefers-color-scheme: dark) {
        background: white;
      }

      @media (prefers-reduced-motion: reduce) {
        display: none;
      }
    }

    $self: &;
    &-linux {
      #{$self}-host {
        color: #009805;

        &-suffix-dir {
          color: blue;
        }

        @media (prefers-color-scheme: dark) {
          color: greenyellow;

          &-suffix-dir {
            color: #1670ff;
          }
        }
      }
    }

    &-line {
      &-split {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
      }

      &-prefix,
      &-suffix {
        flex: 1;
      }

      &-suffix {
        text-align: right;
      }

      b {
        font-weight: 600;
      }
    }
  }
</style>
