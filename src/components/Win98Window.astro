---
import type { JSX } from 'astro/jsx-runtime';
import Win98Button from './Win98Button.astro';

export type Props<AsElem extends keyof JSX.IntrinsicElements = 'div'> = JSX.IntrinsicElements[AsElem] & {
  caption?: string;
  fullWindowControls?: boolean;
  closeButtonHref?: string;
  canvasBackground?: boolean;
  iconSrc?: string;
  statusFields?: string[];
  inactive?: boolean;
  as?: AsElem;
};

const {
  class: className,
  caption,
  fullWindowControls = false,
  canvasBackground = false,
  closeButtonHref,
  iconSrc,
  statusFields,
  inactive,
  as: Container = 'div',
  ...htmlProps
} = Astro.props;
---

<Container
  class={`win98-window ${inactive ? 'win98-window-inactive' : ''} ${className ?? ''}`}
  {...htmlProps}
  title={htmlProps.title ?? caption}
>
  {
    caption && (
      <div class="win98-window-caption">
        {iconSrc && <img class="win98-window-caption-icon" src={iconSrc} alt="" aria-hidden="true" />}
        <span class="win98-window-caption-label" role="heading">
          {caption}
        </span>

        {fullWindowControls && <Win98Button class="win98-window-caption-button win98-window-caption-button-minimize" />}
        {fullWindowControls && <Win98Button class="win98-window-caption-button win98-window-caption-button-expand" />}
        {closeButtonHref && (
          <Win98Button
            as="a"
            href={closeButtonHref}
            class="win98-window-caption-button win98-window-caption-button-close"
          />
        )}
        {!closeButtonHref && <Win98Button class="win98-window-caption-button win98-window-caption-button-close" />}
      </div>
    )
  }
  <div class={`win98-window-content ${canvasBackground ? 'win98-window-content-white' : ''}`}>
    <slot />
  </div>
  {
    statusFields?.length && (
      <div class="win98-window-status-bar">
        {statusFields.map((field) => (
          <div class="win98-window-status-bar-field">{field}</div>
        ))}
      </div>
    )
  }
</Container>

<style lang="scss">
  .win98-window {
    --win98-caption-icon-size: 11px;

    -webkit-font-smoothing: none;
    display: flex;
    flex-flow: column nowrap;
    line-height: 1;
    box-sizing: border-box;
    font-family: var(--font-family-win98);
    font-size: var(--win98-element-font-size);
    box-shadow: var(--win98-border-window-outer), var(--win98-border-window-inner);
    background: var(--win98-surface);
    padding: var(--padding-xss);

    $self: &;
    &-inactive {
      #{$self}-caption {
        background: linear-gradient(90deg, var(--dialog-gray), var(--dialog-gray-light));
      }
    }

    &-caption {
      background: linear-gradient(90deg, var(--win98-dialog-blue), var(--win98-dialog-blue-light));
      padding: calc(var(--padding-xs) - 1px);
      padding-right: var(--padding-xss);
      display: flex;
      justify-content: flex-start;
      align-items: center;

      &-icon {
        width: var(--win98-caption-icon-size);
        height: var(--win98-caption-icon-size);
        margin-right: var(--padding-xs);
      }

      &-label {
        font-weight: bold;
        letter-spacing: 0;
        margin-right: var(--padding-xlg);
        color: white;
        flex: 1;
      }

      &-button {
        display: block;
        min-width: 16px;
        min-height: 14px;
        padding: 0;

        &:active {
          padding: 0;
        }
        &:focus {
          outline: none;
        }

        &-minimize {
          background-image: url('../assets/win98-window-button-icon-minimize.svg');
          background-repeat: no-repeat;
          background-position: bottom 3px left 4px;
        }
        &-expand {
          background-image: url('../assets/win98-window-button-icon-maximize.svg');
          background-repeat: no-repeat;
          background-position: top 2px left 3px;
        }
        &-close {
          margin-left: var(--padding-xss);
          background-image: url('../assets/win98-window-button-icon-close.svg');
          background-repeat: no-repeat;
          background-position: top 3px left 4px;
        }
      }
    }

    &-content {
      padding: var(--padding-md);
      position: relative;
      overflow: hidden;
      flex: 1;

      &-white {
        padding: var(--padding-sm);
        margin: calc(var(--padding-xs) / 2);
        background: var(--win98-button-highlight);
        box-shadow: var(--win98-border-field);
      }
    }

    &-status-bar {
      margin: 0px 1px;
      display: flex;
      gap: 1px;

      &-field {
        flex-grow: 1;
        box-shadow: var(--win98-border-status-field);
        padding: var(--padding-xss) var(--padding-xs);
        margin: 0;
      }
    }

    /*
    --win98-caption-height: 25px;
    --win98-caption-button-color: #c1c1c1;
    --win98-caption-button-offset: 4px;
    --win98-caption-button-size: calc(var(--win98-caption-height) - var(--win98-caption-button-offset) * 2);
    --win98-background: #c0c0c0;
    --win98-background-dark: #2a2a2a;
    --win98-title-start: #000281;
    --win98-title-end: #0f80ce;
    --win98-border-light: #dfdfdf;
    --win98-border-dark: #434343;
    --win98-border-width: 2px;

    display: flex;
    flex-flow: column nowrap;
    line-height: 1;
    box-sizing: border-box;
    background: var(--win98-background);

    border-top: var(--win98-border-width) solid var(--win98-border-light);
    border-left: var(--win98-border-width) solid var(--win98-border-light);
    border-bottom: var(--win98-border-width) solid var(--win98-border-dark);
    border-right: var(--win98-border-width) solid var(--win98-border-dark);

    @media (prefers-color-scheme: dark) {
      --win98-border-light: #4a4a4a;
      --win98-border-dark: #171717;
      --win98-title-start: #000149;
      --win98-title-end: #000013;
      background: var(--win98-background-dark);
    }

    &-caption {
      font-family: var(--font-family-win98);
      margin: 0;
    }

    &-caption {
      color: white;
      background: linear-gradient(to right, var(--win98-title-start), var(--win98-title-end));
      padding: var(--win98-caption-button-offset) var(--win98-caption-button-offset) var(--win98-caption-button-offset)
        var(--padding-sm);
      display: flex;
      align-items: center;
      justify-content: flex-start;


      &-label {
        flex: 1;
        font-size: var(--font-size-xss);
      }

      &-button {
        color: black;
        display: flex;
        align-items: center;
        justify-content: center;
        box-sizing: border-box;
        line-height: 1;
        font-weight: bold;
        font-size: calc(var(--win98-caption-button-size) * 0.7);
        border-top: calc(var(--win98-border-width) / 2) solid var(--win98-border-light);
        border-left: calc(var(--win98-border-width) / 2) solid var(--win98-border-light);
        border-bottom: calc(var(--win98-border-width) / 2) solid var(--win98-border-dark);
        border-right: calc(var(--win98-border-width) / 2) solid var(--win98-border-dark);
        background: var(--win98-caption-button-color);
        height: var(--win98-caption-button-size);
        width: var(--win98-caption-button-size);

        &-minimize::after,
        &-expand::after {
          display: block;
          width: 8px;
          height: 6px;
        }

        &-minimize::after {
          content: '';
          border-bottom: 2px solid black;
        }

        &-expand::after {
          content: '';
          border: 1px solid black;
          border-top: 2px solid black;
        }

        &-close {
          margin-left: calc(var(--win98-caption-button-offset) / 2);

          &:hover {
            text-decoration: none;
          }

          &:visited {
            color: black;
          }

          &::after {
            content: 'x';
          }
        }
      }
    }

     */
  }
</style>
