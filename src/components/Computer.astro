---
import type { HTMLAttributes } from 'astro/types';

import { normalizeColor, type Color } from '../colors';

import Box from './Box.astro';

export interface Props {
  class?: string;
  plasticColor?: Color;
  style?: Exclude<HTMLAttributes<'div'>['style'], string>;
}

const { class: className, style, plasticColor = 'beige' } = Astro.props;

const plasticColorNormalized = normalizeColor(plasticColor) ?? 'beige';
---

<div
  class={`computer ${className ?? ''}`}
  style={{ ...(style ?? {}), '--computer-plastic-color': plasticColorNormalized }}
>
  <div class="computer-screen">
    <Box
      class="computer-screen-front"
      surfaceColor={plasticColorNormalized}
      size={{
        wx: 'var(--computer-monitor-width)',
        wy: 'var(--computer-monitor-width)',
        wz: 'var(--computer-monitor-depth-front)',
      }}
    />

    <i class="computer-screen-back-top"></i>
    <i class="computer-screen-back-bottom"></i>
    <i class="computer-screen-back-left"></i>
    <i class="computer-screen-back-right"></i>
    <i class="computer-screen-back-back"></i>

    <img class="computer-screen-image" src="src/assets/win98.png" alt="Windows 98 Screenshot" />
  </div>

  <Box
    class="computer-screen-stand"
    surfaceColor={plasticColorNormalized}
    size={{
      wx: 'var(--computer-monitor-width)',
      wz: 'var(--computer-monitor-width)',
      wy: 'calc(var(--computer-monitor-depth-front) / 4)',
    }}
  />

  <Box
    class="computer-keyboard"
    surfaceColor={plasticColorNormalized}
    size={{
      wx: 'var(--computer-keyboard-length)',
      wz: 'var(--computer-keyboard-width)',
      wy: 'var(--computer-keyboard-height)',
    }}
  />
  <img class="computer-keyboard-texture" src="src/assets/keyboard.png" alt="Computer Keyboard Texture" />
</div>

<style lang="scss">
  .computer {
    // TODO: refactor to use a single "base" size and derive everything else from it
    --computer-monitor-width: 64px;
    --computer-monitor-depth: 64px;
    --computer-monitor-depth-front: 24px;
    --computer-keyboard-length: 96px;
    --computer-keyboard-width: 32px;
    --computer-keyboard-height: 4px;
    --computer-back-sides-angle: 10deg;

    --back-sides-padding: calc(var(--computer-monitor-depth) * sin(var(--computer-back-sides-angle)));

    transform-style: preserve-3d;
    position: relative;
    height: var(--computer-monitor-width);
    width: max(var(--computer-monitor-width), var(--computer-keyboard-length));

    &-screen {
      --side-padding: 0.2;
      --side-offset: calc(
        (var(--computer-monitor-width) - var(--computer-monitor-width) * (1 - var(--side-padding))) / 2
      );
      --side-width: calc(var(--computer-monitor-width) * (1 - var(--side-padding)));

      transform: rotateX(10deg) translateY(-4px);
      transform-style: preserve-3d;
      position: absolute;
      bottom: 0;

      i {
        display: block;
      }

      &-front {
      }

      &-stand {
        transform: translateZ(calc(-1 * var(--computer-monitor-width) / 2));
        position: absolute;
        bottom: 0;
      }

      &-image {
        position: absolute;
        width: var(--side-width);
        bottom: var(--side-offset);
        left: var(--side-offset);
        height: var(--side-width);
        transform: translateZ(calc(var(--computer-monitor-depth-front) / 2));
      }

      [class^='computer-screen-back-'] {
        position: absolute;
      }

      &-back {
        &-top,
        &-bottom,
        &-left,
        &-right {
          height: var(--computer-monitor-depth);
          width: var(--side-width);
        }

        &-top,
        &-bottom {
          left: var(--side-offset);
          background-image: linear-gradient(to top right, transparent, #00000015),
            linear-gradient(to top, var(--computer-plastic-color), var(--computer-plastic-color));
        }

        &-top {
          top: var(--side-offset);
          transform: translateZ(calc(var(--computer-monitor-depth-front) / -2))
            rotateX(calc(var(--computer-back-sides-angle) - 90deg));
          transform-origin: center top;
        }

        &-bottom {
          bottom: var(--side-offset);
          transform: translateZ(calc(var(--computer-monitor-depth-front) / -2))
            rotateX(calc(90deg - var(--computer-back-sides-angle)));
          transform-origin: center bottom;
        }

        &-left,
        &-right {
          transform-origin: center top;
          // Chrome 116.0.5845.111 has a bug and it doesn't render the element with clip-path intermittently; this animation seems to fix it
          animation: 1s forwards workaround-chrome-clip-path-bug-computer-screen linear;
        }

        @keyframes workaround-chrome-clip-path-bug-computer-screen {
          0%,
          99% {
            clip-path: none;
          }
          100% {
            clip-path: polygon(
              0 0,
              100% 0,
              calc(100% - var(--back-sides-padding)) 100%,
              var(--back-sides-padding) 100%,
              0 0
            );
          }
        }

        &-right {
          transform: rotateZ(90deg) rotateX(-90deg) translateX(calc(var(--computer-monitor-width) / -2))
            translateY(calc(var(--computer-monitor-depth-front) / 2))
            translateZ(calc(-1 * var(--side-offset) - var(--side-width) / 2));

          background-image: linear-gradient(to top right, transparent, #ffffff15),
            linear-gradient(to top, var(--computer-plastic-color), var(--computer-plastic-color));
        }

        &-left {
          transform: rotateZ(90deg) rotateX(-90deg) translateX(calc(var(--computer-monitor-width) / -2))
            translateY(calc(var(--computer-monitor-depth-front) / 2))
            translateZ(calc(var(--side-width) / 2 - var(--side-offset)));

          background-image: linear-gradient(to top right, transparent, #00000015),
            linear-gradient(to top, var(--computer-plastic-color), var(--computer-plastic-color));
        }

        &-back {
          height: calc(var(--side-width) - var(--back-sides-padding) * 2);
          width: var(--side-width);
          transform: translateZ(calc(-1 * var(--computer-monitor-depth) - var(--computer-monitor-depth-front) / 2));
          bottom: calc(var(--back-sides-padding) + var(--side-offset));
          left: var(--side-offset);

          background-image: linear-gradient(to top, #00000030, #00000030),
            linear-gradient(to top, var(--computer-plastic-color), var(--computer-plastic-color));
        }
      }
    }

    &-keyboard {
      bottom: 0;
      position: absolute;
      transform: translateZ(calc(var(--computer-monitor-width) / 2 + var(--computer-keyboard-width) / 4))
        translateX(calc((var(--computer-keyboard-length) - var(--computer-monitor-width)) / -2));

      &-texture {
        position: absolute;
        bottom: 0;
        width: var(--computer-keyboard-length);
        height: var(--computer-keyboard-width);
        transform-origin: center top;
        transform: rotateX(90deg)
          translateZ(calc(-1 * (var(--computer-keyboard-width) - var(--computer-keyboard-height) - 1px)))
          translateY(calc(var(--computer-keyboard-length) / 4))
          translateX(calc((var(--computer-keyboard-length) - var(--computer-monitor-width)) / -2));

        @media (prefers-color-scheme: dark) {
          filter: brightness(0.75);
        }
      }
    }
  }
</style>
