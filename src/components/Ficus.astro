---
import type { HTMLAttributes } from 'astro/types';

import plantImage from '../assets/plant.png';
import { normalizeColor, type Color } from '../colors';

export interface Props {
  color?: Color;
  class?: string;
  style?: Exclude<HTMLAttributes<'div'>['style'], string>;
}

const { class: className, style, color = 'var(--color-surface)' } = Astro.props;
---

<div class:list={['ficus', className]} style={{ ...(style ?? {}), '--side-color': normalizeColor(color) }}>
  <img class="ficus-plant" src={plantImage.src} />
  <div class="ficus-pot">
    <i class="ficus-pot-side-left"></i>
    <i class="ficus-pot-side-right"></i>
    <i class="ficus-pot-side-front"></i>
    <i class="ficus-pot-side-back"></i>
    <i class="ficus-pot-side-left-corner"></i>
    <i class="ficus-pot-side-right-corner"></i>
    <i class="ficus-pot-side-front-corner"></i>
    <i class="ficus-pot-side-back-corner"></i>
    <i class="ficus-pot-lid">
      <i class="ficus-pot-lid-top"></i>
      <i class="ficus-pot-lid-middle"></i>
      <i class="ficus-pot-lid-bottom"></i>
    </i>
    <i class="ficus-pot-lid ficus-pot-lid-soil">
      <i class="ficus-pot-lid-top"></i>
      <i class="ficus-pot-lid-middle"></i>
      <i class="ficus-pot-lid-bottom"></i>
    </i>
  </div>
</div>

<style lang="scss">
  @use 'sass:list';

  /*
  Top view:
       A     B
       |    ||
  C   D|    ||
  -----|----||E
       | \  //
  F    |  //H
  ======//
        G

  Side view:
  |D    E
 X|----/
  |   /
  |  /
  |R/
 O|/

  AD, CD - top lines of front and left sides corresp. if they were not rotated.
  BE, GF - top lines of said planes after they are rotated to *angle R*.
  GE - top line of the corner plane which we need to size and rotate.
  DH - line between intersection of A and B and which is orthogonal to GE (bisector of E-D-G right angle + centroid of E-D-G triangle).

  Using the angle R and the pot's height, we can find DE == DG.
  Since DE == DG, angles DGE and DEG are also equal and are 45deg.
  Thus, using trigonometry, GE = DE / cos(45deg). We could also use Pythagorean theorem to find GE, but CSS sqrt function is not supported in major browsers as of writing.
  HDE is 45deg, DHE is 90 degrees, so we can find DH length from DE: DH = DE * sin(45deg).
  DH is part of the triangle with vertical line of the pot's side, so we can use trigonometry again to find required width of the corner plane (which will be the hypotenuse).
  Using an atan2 function (see reference below), we can find the angle between the corner plane and the pot's side.
  And finally we need to shift the corner plane by OD-DX. OX can be found using cos(R) = OX/(OE=OD) -> OX = cos(R) * OD.

  atan2 reference: https://drafts.csswg.org/css-values-4/#trig-funcs
  > NOTE: atan2(Y, X) is generally equivalent to atan(Y / X)...
  */

  .ficus {
    --pot-side-width: 16px;
    --pot-side-height: 32px;
    --pot-side-angle: 15deg;

    --r: var(--pot-side-angle);
    --od: var(--pot-side-height);
    --ox: calc(cos(var(--r)) * var(--od));

    --de: calc(sin(var(--r)) * var(--od));
    --dx: calc(var(--od) - var(--ox));

    --he: calc(var(--ge) / 2);

    --ge: calc(var(--de) / cos(45deg));
    --dh: calc(var(--de) * sin(45deg));

    --corner-plane-angle: calc(atan2(var(--dh), var(--od)));
    --corner-plane-width: var(--ge);
    --corner-plane-height: calc(var(--dh) / sin(var(--corner-plane-angle)));

    transform-style: preserve-3d;
    width: calc(var(--pot-side-width) + var(--de) * 2);

    &-plant {
      width: calc(var(--pot-side-width) * 2.5);
      transform: translateX(50%) translateZ(calc(var(--pot-side-width) / -2)) rotateY(-20deg);
      transform-origin: bottom center;
      position: absolute;
      bottom: calc(var(--pot-side-height) - var(--dx));
      right: 50%;

      @media (prefers-color-scheme: dark) {
        filter: brightness(0.5);
      }
    }

    &-pot {
      --warm-light: #edd29230;

      transform-style: preserve-3d;
      position: relative;
      height: var(--pot-side-height);
      width: calc(var(--pot-side-width) + var(--de) * 2);

      [class^='ficus-pot-side-'] {
        display: block;
        position: absolute;
        transform-style: preserve-3d;
        transform-origin: left bottom;
        height: var(--pot-side-height);
        width: var(--pot-side-width);
        bottom: 0;
      }

      [class*='ficus-pot-side-'][class*='-corner'] {
        clip-path: polygon(0 0, 100% 0, 50% 100%);
        height: calc(var(--corner-plane-height) - var(--dx));
        width: var(--corner-plane-width);
      }

      &-side {
        &-left {
          transform: translateX(var(--de)) rotateY(90deg) translateZ(0) rotateX(var(--pot-side-angle));

          &-corner {
            transform: translateX(var(--de)) rotateY(45deg * 3) rotateX(var(--corner-plane-angle))
              translateX(calc(var(--corner-plane-width) / -2));
          }
        }
        &-right {
          transform: translateX(var(--de)) rotateY(90deg) translateZ(var(--pot-side-width))
            rotateX(calc(-1 * var(--pot-side-angle)));

          &-corner {
            transform: translateX(var(--de)) translateZ(calc(-1 * var(--pot-side-width)))
              translateX(var(--pot-side-width)) rotateY(45deg * 3) rotateX(calc(-1 * var(--corner-plane-angle)))
              translateX(calc(var(--corner-plane-width) / -2));
          }
        }
        &-back {
          transform: translateX(var(--de)) translateZ(calc(-1 * var(--pot-side-width))) rotateX(var(--pot-side-angle));

          &-corner {
            transform: translateX(var(--de)) translateZ(calc(-1 * var(--pot-side-width))) rotateY(45deg)
              rotateX(var(--corner-plane-angle)) translateX(calc(var(--corner-plane-width) / -2));
          }
        }
        &-front {
          transform: translateX(var(--de)) rotateX(calc(-1 * var(--pot-side-angle)));

          &-corner {
            transform: translateX(calc(var(--pot-side-width) + var(--de))) rotateY(45deg)
              rotateX(calc(-1 * var(--corner-plane-angle))) translateX(calc(var(--corner-plane-width) / -2));
          }
        }

        $shadow-sides: right-corner, right, front-corner, front, left-corner, left, back-corner, back;
        @for $i from 1 through 8 {
          &-#{list.nth($shadow-sides, $i)} {
            background-image:
              linear-gradient(to bottom left, transparent, #00000020),
              linear-gradient(to top, var(--side-color), var(--side-color));
            background-size:
              800% 100%,
              100% 100%;
            background-position:
              ($i - 1) * 100% 0,
              0 100%;
          }
        }

        @media (prefers-color-scheme: dark) {
          @for $i from 1 through 8 {
            &-#{list.nth($shadow-sides, $i)} {
              background-image:
                linear-gradient(to top right, transparent 0%, transparent 50%, var(--warm-light)),
                linear-gradient(to bottom left, transparent, #00000020),
                linear-gradient(to top, var(--side-color), var(--side-color));
            }
          }
        }
      }

      &-lid {
        --lid-size: calc(var(--pot-side-width) + var(--de) * 2);

        display: block;
        position: absolute;
        transform-style: preserve-3d;
        transform-origin: center bottom;
        position: absolute;
        width: var(--lid-size);
        height: var(--lid-size);
        transform: translateX(var(--de)) rotateX(90deg) translateZ(calc(var(--lid-size) - var(--dx)))
          translateY(var(--de)) translateX(calc(-1 * var(--de)));

        --lid-background:
          linear-gradient(to bottom right, transparent 0%, transparent 50%, var(--warm-light)),
          linear-gradient(to top left, transparent, #00000020),
          linear-gradient(to top, var(--side-color), var(--side-color));
        background-image: var(--lid-background);
        clip-path: polygon(
          var(--de) 0,
          calc(var(--de) + var(--pot-side-width)) 0,
          calc(var(--de) * 2 + var(--pot-side-width)) var(--de),
          calc(var(--de) * 2 + var(--pot-side-width)) calc(var(--de) + var(--pot-side-width)),
          calc(var(--de) + var(--pot-side-width)) calc(var(--de) * 2 + var(--pot-side-width)),
          var(--de) calc(var(--de) * 2 + var(--pot-side-width)),
          0 calc(var(--de) + var(--pot-side-width)),
          0 var(--de),
          var(--de) 0
        );

        &:not(&-soil) {
          // Chrome 116.0.5845.111 has a bug and it doesn't render the element with clip-path intermittently; this animation seems to fix it
          animation: 1s forwards workaround-chrome-clip-path-bug-ficus linear;
        }

        @keyframes workaround-chrome-clip-path-bug-ficus {
          0%,
          99% {
            clip-path: none;
          }
          100% {
            clip-path: polygon(
              var(--de) 0,
              calc(var(--de) + var(--pot-side-width)) 0,
              calc(var(--de) * 2 + var(--pot-side-width)) var(--de),
              calc(var(--de) * 2 + var(--pot-side-width)) calc(var(--de) + var(--pot-side-width)),
              calc(var(--de) + var(--pot-side-width)) calc(var(--de) * 2 + var(--pot-side-width)),
              var(--de) calc(var(--de) * 2 + var(--pot-side-width)),
              0 calc(var(--de) + var(--pot-side-width)),
              0 var(--de),
              var(--de) 0
            );
          }
        }

        &-soil {
          --soil-color: #1e1e1e7e;

          transform-origin: center;
          transform: translateX(var(--de)) rotateX(90deg) translateZ(calc(var(--lid-size) / 2 - var(--dx)))
            translateY(calc(var(--de) - var(--lid-size) / 2)) translateX(calc(-1 * var(--de))) scale(0.85);
          background: var(--soil-color);
        }
      }
    }
  }
</style>
