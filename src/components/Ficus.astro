---
import { normalizeColor, type Color } from '../colors';

interface Props {
  color?: Color;
  class?: string;
}

const { class: className, color = 'var(--color-surface)' } = Astro.props;
---

<div class={`ficus ${className ?? ''}`} style={{ '--side-color': normalizeColor(color) }}>
  <img class="ficus-plant" src="src/assets/plant.png" />
  <div class="ficus-pot">
    <i class="ficus-pot-side-left"></i>
    <i class="ficus-pot-side-right"></i>
    <i class="ficus-pot-side-front"></i>
    <i class="ficus-pot-side-back"></i>
    <i class="ficus-pot-side-left-corner"></i>
    <i class="ficus-pot-side-right-corner"></i>
    <i class="ficus-pot-side-front-corner"></i>
    <i class="ficus-pot-side-back-corner"></i>
    <i class="ficus-pot-lid">
      <i class="ficus-pot-lid-top"></i>
      <i class="ficus-pot-lid-middle"></i>
      <i class="ficus-pot-lid-bottom"></i>
    </i>
    <i class="ficus-pot-lid ficus-pot-lid-soil">
      <i class="ficus-pot-lid-top"></i>
      <i class="ficus-pot-lid-middle"></i>
      <i class="ficus-pot-lid-bottom"></i>
    </i>
  </div>
</div>

<style lang="scss">
  @use 'sass:math';
  @use 'sass:list';

  // We have to use SCSS vars instead of native CSS properties because we need trigonometric functions for calculations
  $pot-side-width: 8px;
  $pot-side-height: 16px;
  $pot-side-angle: 15deg;

  /*
  Top view:
       A     B
       |    ||
  C   D|    ||
  -----|----||E
       | \  //
  F    |  //H
  ======//
        G

  Side view:
  |D    E
 X|----/
  |   /
  |  /
  |R/
 O|/

  AD, CD - top lines of front and left sides corresp. if they were not rotated.
  BE, HF - top lines of said planes after they are rotated to *angle R*.
  GE - top line of the corner plane which we need to size and rotate.
  DH - line between intersection of A and B and which is orthogonal to GE (bisector of E-D-G right angle + centroid of E-D-G triangle).

  We know the angle R, we know the length of the vertical side OD==OE (OE is rotated OD), so we can find DE==DG using trigonometry (sin(R) = DE/OE -> DE = sin(R) * OE).
  Knowing DE and DG, we can find GE length using Pythagorean theorem.
  Angle H-D-E is 45deg, D-H-E is 90 degrees, so we can use trigonometry again to find DH length from DE, since HE = GE/2.
  DH is part of the triangle with vertical line of the pot's side, so we can use Pythagorean again to find required width of the corner plane (which will be the hypotenuse).
  Using the same trivial trigonometry, we can find the angle between the corner plane and the pot's side.
  And finally we need to shift the corner plane by OD-DX. OX can be found using cos(R) = OX/(OE=OD) -> OX = cos(R) * OD.
  */
  @function strip-units($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  $od: strip-units($pot-side-height);
  $r: $pot-side-angle;

  $de: math.sin($r) * $od;
  $dg: $de;
  $ge: math.sqrt($de * $de + $dg * $dg);
  $ox: math.cos($r) * $od;
  $dx: $od - $ox;

  $he: math.div($ge, 2);
  $dh: math.sqrt($de * $de - $he * $he);

  $corner-plane-width: $ge;
  $corner-plane-angle: math.atan(math.div($dh, $od));
  $corner-plane-height: $dh / math.sin($corner-plane-angle);

  .ficus {
    transform-style: preserve-3d;
    width: $pot-side-width + $de * 2;

    &-plant {
      width: $pot-side-width * 2.5;
      transform: translateX(50%) translateZ(-$pot-side-width / 2) rotateY(-20deg);
      transform-origin: bottom center;
      position: absolute;
      bottom: $pot-side-height - $dx;
      right: 50%;

      @media (prefers-color-scheme: dark) {
        filter: brightness(0.5);
      }
    }

    &-pot {
      --warm-light: #edd29230;

      transform-style: preserve-3d;
      position: relative;
      height: $pot-side-height;
      width: $pot-side-width + $de * 2;

      [class^='ficus-pot-side-'] {
        display: block;
        position: absolute;
        transform-style: preserve-3d;
        transform-origin: left bottom;
        height: $pot-side-height;
        width: $pot-side-width;
        bottom: 0;
      }

      [class*='ficus-pot-side-'][class*='-corner'] {
        clip-path: polygon(0 0, 100% 0, 50% 100%);
        height: $corner-plane-height - $dx + px;
        width: $corner-plane-width + px;
      }

      &-side {
        &-left {
          transform: translateX($de + px) rotateY(90deg) translateZ(0) rotateX($pot-side-angle);

          &-corner {
            transform: translateX($de + px) rotateY(45deg * 3) rotateX($corner-plane-angle)
              translateX(-$corner-plane-width / 2 + px);
          }
        }
        &-right {
          transform: translateX($de + px) rotateY(90deg) translateZ($pot-side-width) rotateX(-$pot-side-angle);

          &-corner {
            transform: translateX($de + px) translateZ(-$pot-side-width) translateX($pot-side-width) rotateY(45deg * 3)
              rotateX(-$corner-plane-angle) translateX(-$corner-plane-width / 2 + px);
          }
        }
        &-back {
          transform: translateX($de + px) translateZ(-$pot-side-width) rotateX($pot-side-angle);

          &-corner {
            transform: translateX($de + px) translateZ(-$pot-side-width) rotateY(45deg) rotateX($corner-plane-angle)
              translateX(-$corner-plane-width / 2 + px);
          }
        }
        &-front {
          transform: translateX($de + px) rotateX(-$pot-side-angle);

          &-corner {
            transform: translateX($pot-side-width + $de) rotateY(45deg) rotateX(-$corner-plane-angle)
              translateX(-$corner-plane-width / 2 + px);
          }
        }

        $shadow-sides: right-corner, right, front-corner, front, left-corner, left, back-corner, back;
        @for $i from 1 through 8 {
          &-#{list.nth($shadow-sides, $i)} {
            background-image: linear-gradient(to bottom left, transparent, #00000020),
              linear-gradient(to top, var(--side-color), var(--side-color));
            background-size: 800% 100%, 100% 100%;
            background-position: ($i - 1) * 100% 0, 0 100%;
          }
        }

        @media (prefers-color-scheme: dark) {
          @for $i from 1 through 8 {
            &-#{list.nth($shadow-sides, $i)} {
              background-image: linear-gradient(to top right, transparent 0%, transparent 50%, var(--warm-light)),
                linear-gradient(to bottom left, transparent, #00000020),
                linear-gradient(to top, var(--side-color), var(--side-color));
            }
          }
        }
      }

      &-lid {
        $lid-size: $pot-side-width + $de * 2;
        display: block;
        position: absolute;
        transform-style: preserve-3d;
        transform-origin: center bottom;
        position: absolute;
        width: $lid-size;
        height: $lid-size;
        transform: translateX($de + px) rotateX(90deg) translateZ($lid-size - $dx) translateY($de + px)
          translateX(-$de + px);

        --lid-background: linear-gradient(to bottom right, transparent 0%, transparent 50%, var(--warm-light)),
          linear-gradient(to top left, transparent, #00000020),
          linear-gradient(to top, var(--side-color), var(--side-color));
        background-image: var(--lid-background);
        clip-path: polygon(
          $de + px 0,
          $de + $pot-side-width 0,
          $de + $pot-side-width + $de $de + px,
          $de + $pot-side-width + $de $de + $pot-side-width,
          $de + $pot-side-width $de + $pot-side-width + $de,
          $de + px $de + $pot-side-width + $de,
          0 $de + $pot-side-width,
          0 $de + px,
          $de + px 0
        );

        &:not(&-soil) {
          // Chrome 116.0.5845.111 has a bug and it doesn't render the element with clip-path intermittently; this animation seems to fix it
          animation: 1s forwards workaround-chrome-clip-path-bug-ficus linear;
        }

        @keyframes workaround-chrome-clip-path-bug-ficus {
          0%,
          99% {
            clip-path: none;
          }
          100% {
            clip-path: polygon(
              $de + px 0,
              $de + $pot-side-width 0,
              $de + $pot-side-width + $de $de + px,
              $de + $pot-side-width + $de $de + $pot-side-width,
              $de + $pot-side-width $de + $pot-side-width + $de,
              $de + px $de + $pot-side-width + $de,
              0 $de + $pot-side-width,
              0 $de + px,
              $de + px 0
            );
          }
        }

        &-soil {
          --soil-color: #1e1e1e7e;

          transform-origin: center;
          transform: translateX($de + px) rotateX(90deg) translateZ($lid-size - $dx - $lid-size / 2)
            translateY($de - $lid-size / 2) translateX(-$de + px) scale(0.85);
          background: var(--soil-color);
        }
      }
    }
  }
</style>
