---
import { normalizeColor, type Color } from '../colors';
import { readBmpImage, type BitmapImagePath, type ImagePixelFrames } from '../images';

import BoxGrid, { type Props as BoxGridProps } from './BoxGrid.astro';

interface BaseProps
  extends Pick<
    BoxGridProps,
    'gap' | 'cellSize' | 'hideSurfaces' | 'hideGradient' | 'animationFrame' | 'animationDelay'
  > {
  class?: string;
  title?: string;
  cellsColor?: Color;
}

export type Props = BaseProps &
  (
    | {
        imagePath: BitmapImagePath;
      }
    | {
        framesImagesPaths: BitmapImagePath[];
      }
  );

const props = Astro.props;
const {
  title,
  class: className,
  cellsColor,
  hideSurfaces,
  hideGradient,
  animationFrame,
  animationDelay,
  gap,
  cellSize,
} = props;

const defaultTransparentColor = normalizeColor(0xffffffff);

let imagePixels: ImagePixelFrames[][];
if ('imagePath' in props) {
  imagePixels = (await readBmpImage(props.imagePath)).map((r) =>
    r.map((p) => [(normalizeColor(p) === defaultTransparentColor ? null : cellsColor) ?? p] as ImagePixelFrames),
  );
} else {
  const frames = await Promise.all(props.framesImagesPaths.map(readBmpImage));

  const [firstFrame, ...otherFrames] = frames;
  if (!otherFrames.every((f) => f.length === firstFrame.length && f[0].length === firstFrame[0].length)) {
    throw new Error('All frames must have the same dimensions');
  }

  imagePixels = firstFrame.map((row, y) =>
    row.map(
      (_, x) =>
        frames.map(
          (f) => (normalizeColor(f[y][x]) === defaultTransparentColor ? null : cellsColor) ?? f[y][x],
        ) as ImagePixelFrames,
    ),
  );
}
---

<BoxGrid
  title={title}
  class={className}
  rows={imagePixels}
  hideSurfaces={hideSurfaces}
  hideGradient={hideGradient}
  transparentColor={defaultTransparentColor}
  animationDelay={animationDelay}
  animationFrame={animationFrame}
  cellSize={cellSize}
  gap={gap}
/>
