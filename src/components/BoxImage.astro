---
import { readBmpImage, type BitmapImagePath, type ImagePixelFrames } from '../images';

import BoxGrid, { type Props as BoxGridProps } from './BoxGrid.astro';

interface BaseProps extends Pick<BoxGridProps, 'gapPx' | 'hideSurfaces' | 'animationFrameMs' | 'animationDelayMs'> {
  class?: string;
}

export type Props = BaseProps &
  (
    | {
        imagePath: BitmapImagePath;
      }
    | {
        framesImagesPaths: BitmapImagePath[];
      }
  );

const props = Astro.props;
const { class: className, hideSurfaces, animationFrameMs, animationDelayMs, gapPx } = props;

let imagePixels: ImagePixelFrames[][];
if ('imagePath' in props) {
  imagePixels = (await readBmpImage(props.imagePath)).map((r) => r.map((p) => [p] as ImagePixelFrames));
} else {
  const frames = await Promise.all(props.framesImagesPaths.map(readBmpImage));

  const [firstFrame, ...otherFrames] = frames;
  if (!otherFrames.every((f) => f.length === firstFrame.length && f[0].length === firstFrame[0].length)) {
    throw new Error('All frames must have the same dimensions');
  }

  imagePixels = firstFrame.map((row, y) =>
    row.map((_, x) => Array.from(new Set(frames.map((f) => f[y][x]))) as ImagePixelFrames),
  );
}
---

<div class="box-image-container">
  <BoxGrid
    class={className}
    rows={imagePixels}
    hideSurfaces={hideSurfaces}
    animationDelayMs={animationDelayMs}
    animationFrameMs={animationFrameMs}
    gapPx={gapPx}
  />

  <div class="box-image-shadow"></div>
</div>

<style lang="scss">
  .box-image {
    &-container {
      transform-style: preserve-3d;
    }

    &-shadow {
      // TODO: make generic!
      background: #00000061; // TODO: rgba()
      filter: blur(3vmin);
      transform: rotateX(90deg) translateZ(-580px) translateY(-580px) rotateZ(10deg); // TODO: couple to image dimensions
      position: absolute;
      top: -30%;
      border-radius: 100%;
      left: 10%;
      right: 10%;
      bottom: 0;
    }
  }
</style>
