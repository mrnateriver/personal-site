---
import type { Color } from '../colors';

import { getBoxStyleVars, type BoxProps } from './box-properties';
import Box, { type BaseBoxProps } from './Box.astro';

export interface Props extends Pick<BaseBoxProps, 'hideSurfaces'> {
  gap?: number;
  class?: string;
  cellSize?: number;
  transparentColor?: Color;
  rows: Array<Array<[Color, ...Color[]]>>; // Pixel Rows -> Columns -> Frames+
}

const { gap = 4, cellSize = 24, transparentColor = 0xffffffff, rows, class: className, hideSurfaces } = Astro.props;

const rowsWithVisibleCells = rows.map(
  (row) => row.map((c, j) => [c, j] as const).filter(([c]) => c[0] !== transparentColor), // TODO: animate frames
);

const rowsByColors = new Map<Color, Map<number, number[]>>(); // Color -> Row Index -> Column Index[]

rowsWithVisibleCells.forEach((row, i) => {
  for (const entry of row) {
    const [[color], column] = entry; // TODO: animate frames

    if (!rowsByColors.has(color)) {
      rowsByColors.set(color, new Map([[i, []]]));
    }
    if (!rowsByColors.get(color)?.has(i)) {
      rowsByColors.get(color)?.set(i, []);
    }

    rowsByColors.get(color)?.get(i)?.push(column);
  }
});

const style = {
  '--gap': `${gap}px`,
  '--cell-size': `${cellSize}px`,
  '--rows-count': rows.length,
  '--columns-count': rows[0]?.length ?? 0,
} as const;

const baseSectionProps: BoxProps = {
  surfaceColor: 0x00000000,
  wx: cellSize,
  wy: cellSize,
  wz: cellSize,
};
---

<div class:list={['grid', className]} style={style}>
  {
    Array.from(rowsByColors.entries()).map(([surfaceColor, rows]) => (
      <div
        class="grid-section"
        style={getBoxStyleVars({
          ...baseSectionProps,
          surfaceColor: { all: surfaceColor, front: 0x003030ff /* FIXME: TEMP! */ },
        })}
      >
        {Array.from(rows.entries()).map(([rowIndex, cells]) => (
          <div class="grid-section-row" style={{ top: `${rowIndex * (cellSize + gap)}px` }}>
            {cells.map((columnIndex) => (
              <Box
                class="grid-section-row-cell"
                style={{ left: `${columnIndex * (cellSize + gap)}px` }}
                skipStyleVars={true}
                hideSurfaces={hideSurfaces}
              />
            ))}
          </div>
        ))}
      </div>
    ))
  }
</div>

<style lang="scss">
  .grid {
    height: calc(var(--rows-count) * var(--cell-size) + (var(--rows-count) - 1) * var(--gap));
    width: calc(var(--columns-count) * var(--cell-size) + (var(--columns-count) - 1) * var(--gap));
    transform-style: preserve-3d;
    position: relative;

    &-section {
      transform-style: preserve-3d;
      position: absolute;
      left: 0;
      top: 0;

      &-row {
        height: var(--cell-size);
        transform-style: preserve-3d;
        position: absolute;

        &-cell {
          position: absolute;
        }
      }
    }
  }
</style>
