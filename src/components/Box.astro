---
import { getBoxStyleVars, type BoxProps } from './box-properties';

export interface Props extends BoxProps {
  style?: Record<string, string>;
  class?: string;
  skipStyleVars?: boolean;
}

const { class: className, style: boxStyle, skipStyleVars = false } = Astro.props;

// There are quite a lot of vars, and they get injected into all children, so to save up space, inject them manually
// instead of using the `define:vars` prop.
const style = {
  ...boxStyle,
  ...(skipStyleVars ? {} : getBoxStyleVars(Astro.props)),
};
---

<i class:list={['box', className]} style={style}>
  <i class="box-top"></i>
  <i class="box-bottom"></i>
  <i class="box-front"></i>
  <i class="box-back"></i>
  <i class="box-left"></i>
  <i class="box-right"></i>
</i>

<style lang="scss">
  .box {
    display: block;

    width: var(--wx);
    height: var(--wy);
    transform-style: preserve-3d;
    backface-visibility: visible;
    overflow: visible;

    [class^='box-'] {
      overflow: hidden;
      backface-visibility: visible;
      position: absolute;
      left: 0;
      top: 0;
    }

    &-top,
    &-bottom {
      transform-origin: center top;
      height: var(--wz);
      width: var(--wx);
    }
    &-top {
      transform: rotateX(-90deg) translateY(calc(var(--wz) / -2));
      background-image: linear-gradient(to bottom, var(--surface-top-color-dark), transparent),
        linear-gradient(to right, var(--surface-top-color-dark), transparent),
        linear-gradient(to bottom, var(--surface-top-color), var(--surface-top-color-light));
      background-size: 1px 100%, 100% 1px, auto;
      background-repeat: no-repeat;
    }
    &-bottom {
      transform: translateY(var(--wy)) rotateX(-90deg) translateY(calc(var(--wz) / -2));
      background-color: var(--surface-bottom-color-dark);
    }

    &-front,
    &-back {
      height: var(--wy);
      width: var(--wx);
    }
    &-front {
      transform: translateZ(calc(var(--wz) / 2));
      background-image: linear-gradient(to bottom, var(--surface-front-color), var(--surface-front-color-dark));
    }
    &-back {
      transform: translateZ(calc(-1 * var(--wz) + var(--wz) / 2));
      background-color: var(--surface-back-color);
    }

    &-left,
    &-right {
      height: var(--wy);
      width: var(--wz);
      background-size: 2px 100%, auto auto;
      background-repeat: no-repeat;
      transform-origin: left center;
    }
    &-left {
      transform: translateZ(calc(var(--wz) / 2)) rotateY(90deg);
      background-image: linear-gradient(to bottom, var(--surface-left-color-dark), transparent),
        linear-gradient(to bottom, var(--surface-left-color), var(--surface-left-color-medium));
    }
    &-right {
      transform: translateZ(calc(var(--wz) / 2)) translateX(var(--wx)) rotateY(90deg);
      background-image: linear-gradient(to bottom, var(--surface-right-color-dark), transparent),
        linear-gradient(to bottom, var(--surface-right-color), var(--surface-right-color-medium));
    }
  }
</style>
