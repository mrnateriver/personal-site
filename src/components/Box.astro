---
import { getBoxStyleVars, type BoxProps, type BoxSurfaceColors } from './box-properties';

export interface BaseBoxProps {
  style?: Record<string, string>;
  class?: string;
  hideSurfaces?: { [key in keyof BoxSurfaceColors]?: boolean };
}

export type Props = (BaseBoxProps & { skipStyleVars: true }) | (BaseBoxProps & { skipStyleVars?: false } & BoxProps);

const { class: className, style: boxStyle, hideSurfaces = {}, skipStyleVars = false } = Astro.props;

// There are quite a lot of vars, and they get injected into all children, so to save up space, inject them manually
// instead of using the `define:vars` prop.
const style = {
  ...boxStyle,
  ...(skipStyleVars ? {} : getBoxStyleVars(Astro.props as BoxProps)),
};

const hideSurfacesClasses = Object.keys(hideSurfaces).map((surface) => `box-sides-hide-${surface}`);
---

<i class:list={['box', className, ...hideSurfacesClasses]} style={style}>
  <i class="box-sides-x"></i>
  <i class="box-sides-y"></i>
  <i class="box-sides-z"></i>
</i>

<style lang="scss">
  .box {
    display: block;
    width: var(--wx);
    height: var(--wy);
    will-change: transform;
    transform-style: preserve-3d;
    overflow: visible;

    [class^='box-sides-']::before,
    [class^='box-sides-']::after {
      content: '';
      display: block;
      position: absolute;
      left: 0;
      top: 0;
    }

    &-sides {
      $self: &;
      &-hide {
        &-top #{$self}-y::before,
        &-bottom #{$self}-y::after,
        &-front #{$self}-z::before,
        &-back #{$self}-z::after,
        &-left #{$self}-x::before,
        &-right #{$self}-x::after {
          content: none;
        }
      }

      &-x,
      &-y,
      &-z {
        transform-style: preserve-3d;
        display: block;
      }

      &-y {
        &::before,
        &::after {
          transform-origin: center top;
          height: var(--wz);
          width: var(--wx);
        }

        &::before {
          transform: rotateX(-90deg) translateY(calc(var(--wz) / -2));
          background-image: linear-gradient(to bottom, hsl(var(--st) calc(var(--st-l) - 10%)), transparent),
            linear-gradient(to right, hsl(var(--st) calc(var(--st-l) - 10%)), transparent),
            linear-gradient(to top, hsl(var(--st) var(--st-l)), hsl(var(--st) calc(var(--st-l) + 5%)));
          background-size: 1px 100%, 100% 1px, auto;
          background-repeat: no-repeat;
        }

        &::after {
          transform: translateY(var(--wy)) rotateX(-90deg) translateY(calc(var(--wz) / -2));
          background-image: linear-gradient(to top, hsl(var(--sb) calc(var(--sb-l) - 10%)), transparent),
            linear-gradient(to top, hsl(var(--sb) var(--sb-l)), hsl(var(--sb) calc(var(--sb-l) + 5%))),
            linear-gradient(to left, hsl(var(--sb) calc(var(--sb-l) - 10%)), hsl(var(--sb) var(--sb-l)));
          background-size: 1px 100%, auto calc(100% - 1px), auto;
          background-repeat: no-repeat;
        }
      }

      &-z {
        &::before,
        &::after {
          height: var(--wy);
          width: var(--wx);
          background-size: auto calc(var(--total-rows) * 100%);
          background-position-y: calc(var(--ri) * 100% / var(--total-rows));
        }

        &::before {
          transform: translateZ(calc(var(--wz) / 2));
          background-image: linear-gradient(
            to bottom,
            hsl(var(--sf) var(--sf-l)),
            hsl(var(--sf) calc(var(--sf-l) - 15%))
          );
        }

        &::after {
          transform: translateZ(calc(-1 * var(--wz) + var(--wz) / 2));
          background-image: linear-gradient(
            to top,
            hsl(var(--sbk) var(--sbk-l)),
            hsl(var(--sbk) calc(var(--sbk-l) - 15%))
          );
        }
      }

      &-x {
        &::before,
        &::after {
          height: var(--wy);
          width: var(--wz);
          background-size: 1px 100%, auto calc(var(--total-rows) * 100%);
          background-position-y: calc(var(--ri) * 100% / var(--total-rows));
          background-repeat: no-repeat;
          transform-origin: left center;
        }

        &::before {
          transform: translateZ(calc(var(--wz) / 2)) rotateY(90deg);
          background-image: linear-gradient(to bottom, hsl(var(--sl) calc(var(--sl-l) - 10%)), transparent),
            linear-gradient(to bottom, hsl(var(--sl) var(--sl-l)), hsl(var(--sl) calc(var(--sl-l) - 15%)));
        }

        &::after {
          transform: translateZ(calc(var(--wz) / 2)) translateX(var(--wx)) rotateY(90deg);
          background-image: linear-gradient(to bottom, hsl(var(--sr) calc(var(--sr-l) - 10%)), transparent),
            linear-gradient(to bottom, hsl(var(--sr) var(--sr-l)), hsl(var(--sr) calc(var(--sr-l) - 15%)));
        }
      }
    }
  }
</style>
