---
import { getBoxStyleVars, type BoxProps, type BoxSurfaceColors } from './box-properties';

export interface BaseBoxProps {
  style?: Record<string, string>;
  class?: string;
  hideSurfaces?: { [key in keyof BoxSurfaceColors]?: boolean };
  hideGradient?: boolean;
}

export type Props = (BaseBoxProps & { skipStyleVars: true }) | (BaseBoxProps & { skipStyleVars?: false } & BoxProps);

const {
  class: className,
  style: boxStyle,
  hideSurfaces = {},
  hideGradient = false,
  skipStyleVars = false,
} = Astro.props;

// There are quite a lot of vars, and they get injected into all children, so to save up space, inject them manually
// instead of using the `define:vars` prop.
const style = {
  ...boxStyle,
  ...(skipStyleVars ? {} : getBoxStyleVars(Astro.props as BoxProps)),
};

const sides = (['left', 'right', 'top', 'bottom', 'front', 'back'] as Array<keyof typeof hideSurfaces>)
  .filter((side) => !hideSurfaces[side])
  .map((side) => `box-side-${side}`);
---

<i class:list={['box', className, hideGradient ? 'box-side-hide-gradient' : '']} style={style}>
  {sides.map((side) => <i class={side} />)}
</i>

<style lang="scss">
  @use 'sass:list';

  .box {
    display: block;
    width: var(--wx);
    height: var(--wy);
    will-change: transform;
    transform-style: preserve-3d;
    overflow: visible;

    [class^='box-side-'] {
      transform-style: preserve-3d;
      position: absolute;
      display: block;
      left: 0;
      top: 0;
    }

    &-side {
      $self: &;
      $sides: left, right, top, bottom, front, back;
      $colors: --sl, --sr, --st, --sb, --sf, --sbk;
      $lighten: rgba(255, 255, 255, 0.35);
      $darken: rgba(0, 0, 0, 0.15);

      &-hide-gradient {
        @for $i from 1 through 6 {
          #{$self}-#{list.nth($sides, $i)} {
            background-image: linear-gradient(
              to right,
              var(list.nth($colors, $i), var(--sa)),
              var(list.nth($colors, $i), var(--sa))
            );
          }
        }
      }

      &-top,
      &-bottom {
        height: var(--wz);
        width: var(--wx);
        transform-origin: center top;
        background-size: calc(var(--columns-count, 1) * 100%) 100%;
      }
      &-top {
        background-image: linear-gradient(to top right, transparent, $lighten),
          linear-gradient(to right, var(--st, var(--sa)), var(--st, var(--sa)));
        transform: rotateX(-90deg) translateY(calc(var(--wz) / -2));
      }
      &-bottom {
        background-image: linear-gradient(to top right, transparent, $lighten),
          linear-gradient(to right, var(--sb, var(--sa)), var(--sb, var(--sa)));
        transform: translateY(var(--wy)) rotateX(-90deg) translateY(calc(var(--wz) / -2));
      }

      &-front,
      &-back {
        height: var(--wy);
        width: var(--wx);
        background-size: calc(var(--rows-count, 1) * 100%) calc(var(--columns-count, 1) * 100%);
        background-position-y: calc(var(--ri, 1) * 100% / var(--rows-count, 1));
      }
      &-front {
        transform: translateZ(calc(var(--wz) / 2));
        background-image: linear-gradient(to bottom right, transparent, $darken),
          linear-gradient(to top right, transparent, $lighten),
          linear-gradient(to bottom, var(--sf, var(--sa)), var(--sf, var(--sa)));
      }
      &-back {
        transform: translateZ(calc(-1 * var(--wz) + var(--wz) / 2));
        background-image: linear-gradient(to bottom right, transparent, $darken),
          linear-gradient(to top right, transparent, $lighten),
          linear-gradient(to bottom, var(--sbk, var(--sa)), var(--sbk, var(--sa)));
      }

      &-left,
      &-right {
        height: var(--wy);
        width: var(--wz);
        transform-origin: left center;
        background-repeat: no-repeat;
        background-size: 100% calc(var(--rows-count) * 100%);
        background-position-y: calc(var(--ri) * 100% / var(--rows-count));
      }
      &-left {
        transform: translateZ(calc(var(--wz) / 2)) rotateY(90deg);
        background-image: linear-gradient(to bottom right, transparent, $darken),
          linear-gradient(to bottom, var(--sl, var(--sa)), var(--sl, var(--sa)));
      }
      &-right {
        transform: translateZ(calc(var(--wz) / 2)) translateX(var(--wx)) rotateY(90deg);
        background-image: linear-gradient(to bottom right, transparent, $darken),
          linear-gradient(to bottom, var(--sr, var(--sa)), var(--sr, var(--sa)));
      }
    }
  }
</style>
