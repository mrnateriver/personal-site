---
import type { JSX } from 'astro/jsx-runtime';
import { getCollection } from 'astro:content';

import win98iconComputer from '../assets/win98-icon-computer.png';
import win98iconSearch from '../assets/win98-icon-search.png';
import Acknowledgments from '../components/Acknowledgments.astro';
import BlogPost from '../components/BlogPost.astro';
import BoxString from '../components/BoxString.astro';
import IndexLink from '../components/IndexLink.astro';
import Pagination from '../components/Pagination.astro';
import type { TreeNode } from '../components/Win98Tree.astro';
import Win98Tree from '../components/Win98Tree.astro';
import Win98Window from '../components/Win98Window.astro';
import Layout from '../layouts/Layout.astro';

const labelsColor = 'var(--color-primary)';

const posts = await getCollection('blog');

const tags: TreeNode[] = [
  {
    label: 'Tags',
    iconSrc: win98iconComputer.src,
    children: [
      { label: 'AI', href: 'https://google.com' },
      { label: 'Career', children: [{ label: 'Test 1' }, { label: 'Hello' }, { label: 'There' }] },
      { label: 'DataProcessing' },
    ],
  },
];

// TODO: content output
---

<Layout title="Blog">
  <div class="layout-blog">
    <header class="layout-blog-header">
      <h1 class="layout-blog-header-title" id="blog-page-title">
        <BoxString string="blog" color={labelsColor} cellSize="16px" gap={0} />
      </h1>
      <div class="layout-blog-header-appendix">
        <span
          class="layout-blog-header-subtitle"
          role={'doc-subtitle' as JSX.IntrinsicElements['span']['role']}
          aria-labelledby="blog-page-title">Opinionated Tales</span
        >
        <IndexLink class="layout-blog-header-back-home" />
      </div>
    </header>

    <div class="layout-blog-content">
      <Win98Window
        class="layout-blog-content-tags window-draggable"
        as="aside"
        caption="Tags"
        iconSrc={win98iconSearch.src}
        canvasBackground
      >
        <Win98Tree nodes={tags} />
      </Win98Window>

      <div class="layout-blog-content-main">
        <main>
          <h2 class="layout-blog-content-main-separator-title layout-blog-content-main-separator-title-hidden">
            Latest post
          </h2>

          <BlogPost
            class="window-draggable"
            title="Hello"
            summary="Article summary lorem ipsum dolores sanchez something or other whatever"
            date={new Date()}
            href="/blog/hello"
            summaryAiGenerated
          />

          <h2 class="layout-blog-content-main-separator-title">Previous posts</h2>

          <BlogPost
            class="window-draggable"
            imageSrc="https://www.learningcomputer.com/images/windows_98_help.gif"
            title="Hello"
            summary="Article summary lorem ipsum dolores sanchez something or other whatever Article summary lorem ipsum dolores sanchez something or other whatever Article summary lorem ipsum dolores sanchez something or other whatever Article summary lorem ipsum dolores sanchez something or other whatever Article summary lorem ipsum dolores sanchez something or other whatever Article summary lorem ipsum dolores sanchez something or other whatever"
            date={new Date()}
            tags={['test', 'else']}
            href="/blog/hello"
            summaryAiGenerated
          />

          <BlogPost
            class="window-draggable"
            title="Hello"
            summary="Article summary lorem ipsum dolores sanchez something or other whatever"
            date={new Date()}
            href="/blog/hello"
          />
        </main>

        <Pagination
          class="layout-blog-content-pagination window-draggable"
          totalPages={16}
          currentPage={6}
          pageHrefTemplate="/test/[page]/test"
        />
      </div>
    </div>

    <Acknowledgments class="acks" />
  </div>
</Layout>

<script>
  const windows = document.querySelectorAll('.window-draggable');
  for (const window of windows) {
    makeWindowDraggable(window as HTMLElement);
  }

  let draggedWindow: HTMLElement | undefined;
  let dragStartX: number | undefined;
  let dragStartY: number | undefined;
  let initialTransformX: number | undefined;
  let initialTransformY: number | undefined;
  let initialUserSelect: string;
  let lastZIndex = 1;

  function makeWindowDraggable(window: HTMLElement) {
    const titleBar = window.querySelector('.win98-window-caption') as HTMLElement;
    if (!titleBar) {
      return;
    }

    titleBar.addEventListener('mousedown', startDragHandler.bind(undefined, window), { passive: true });
  }

  function startDragHandler(target: HTMLElement, event: MouseEvent) {
    draggedWindow = target;

    dragStartX = event.clientX;
    dragStartY = event.clientY;

    const style = window.getComputedStyle(target);
    const matrix = new DOMMatrix(style.transform);
    initialTransformX = matrix.m41;
    initialTransformY = matrix.m42;

    target.style.zIndex = (lastZIndex++).toString();

    initialUserSelect = document.documentElement.style.userSelect;
    document.documentElement.style.userSelect = 'none';

    document.addEventListener('mousemove', onMouseMove, { passive: true });
    document.addEventListener('mouseup', stopDragHander);
    window.addEventListener('focusout', stopDragHander);
    document.addEventListener('visibilitychange', stopDragHander);
  }

  function stopDragHander() {
    draggedWindow = undefined;

    document.documentElement.style.userSelect = initialUserSelect;

    document.removeEventListener('mouseup', stopDragHander);
    window.removeEventListener('focusout', stopDragHander);
    document.removeEventListener('visibilitychange', stopDragHander);
    document.removeEventListener('mousemove', onMouseMove);
  }

  function onMouseMove(event: MouseEvent) {
    if (
      !draggedWindow ||
      typeof dragStartX !== 'number' ||
      typeof dragStartY !== 'number' ||
      typeof initialTransformX !== 'number' ||
      typeof initialTransformY !== 'number'
    ) {
      return;
    }

    const dx = event.clientX - dragStartX;
    const dy = event.clientY - dragStartY;

    draggedWindow.style.transform = `translate(${initialTransformX + dx}px, ${initialTransformY + dy}px)`;
  }
</script>

<style is:global>
  .layout-blog-content-tags .win98-window-content {
    overflow-y: scroll;
  }
</style>

<style lang="scss">
  .acks {
    margin: var(--padding-sm) 0;
  }

  .layout-blog {
    --max-layout-blog-width: 1000px;

    max-width: var(--max-layout-blog-width);
    min-height: 100vh;
    margin: 0 auto;
    padding: 0 var(--padding-lg);
    display: flex;
    flex-direction: column;

    &-header {
      display: flex;
      align-items: stretch;
      gap: var(--padding-xlg);
      flex-wrap: wrap;
      padding: var(--padding-lg) 0;

      &-title {
        margin: 0;
      }

      &-subtitle {
        color: var(--color-text-secondary);
        font-family: var(--font-family-win98);
        font-size: 1rem;
        margin: 0;
      }

      &-back-home {
      }

      &-appendix {
        display: flex;
        flex-flow: column;
        align-items: flex-start;
        justify-content: center;
      }
    }

    &-content {
      $column-breakpoint: 565px;

      flex: 1;
      display: flex;
      align-items: start;
      gap: var(--padding-lg);

      @media (max-width: $column-breakpoint) {
        flex-direction: column;
      }

      &-tags {
        width: 150px;
        min-height: 190px;

        @media (max-width: $column-breakpoint) {
          width: 100%;
        }
      }

      &-main,
      main {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: var(--padding-lg);
      }

      &-main-separator-title {
        color: var(--color-text-secondary);
        text-align: center;
        font-family: var(--font-family-win98);
        font-weight: normal;
        font-size: var(--font-size-sm);
        line-height: 0.5;
        margin: var(--padding-lg) 0 0;

        &-hidden {
          opacity: 0;
          position: absolute;
          user-select: none;
        }
      }

      &-pagination {
        align-self: flex-start;
      }
    }
  }
</style>
