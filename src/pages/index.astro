---
import Acknowledgments from '../components/Acknowledgments.astro';
import BoxImage from '../components/BoxImage.astro';
import Chair from '../components/Chair.astro';
import Computer from '../components/Computer.astro';
import Desk from '../components/Desk.astro';
import Ficus from '../components/Ficus.astro';
import SectionLink from '../components/SectionLink.astro';
import IndexLayout from '../layouts/Layout.astro';

const hideSurfacesLabels = { right: true, back: true, bottom: true };
const hideSurfacesShadows = { right: true, left: true, back: true, bottom: true, top: true };

const labelsColor = 'var(--color-text-anchor)';
const labelsColorShadow = 'var(--labels-shadow-color)';

const commonLabelsProps = {
  cellSize: 'var(--labels-size)',
  gap: 0,
};
---

<IndexLayout title="Hi mom">
  <main>
    <i class="main-wall main-wall-vertical"></i>
    <i class="main-wall main-wall-horizontal"></i>

    <section class="labels-container">
      <!-- TODO: accessibility for boximages -->
      <h1>
        <BoxImage
          imagePath="src/assets/label_author.bmp"
          hideSurfaces={hideSurfacesShadows}
          cellsColor={labelsColorShadow}
          hideGradient={true}
          {...commonLabelsProps}
        />
      </h1>

      <div class="labels-links">
        <div class="labels-shadows">
          <BoxImage
            imagePath="src/assets/label_blog.bmp"
            hideSurfaces={hideSurfacesShadows}
            cellsColor={labelsColorShadow}
            hideGradient={true}
            {...commonLabelsProps}
          />
          <BoxImage
            imagePath="src/assets/label_resume.bmp"
            hideSurfaces={hideSurfacesShadows}
            cellsColor={labelsColorShadow}
            hideGradient={true}
            {...commonLabelsProps}
          />
        </div>

        <SectionLink
          class="labels-blog"
          href="https://google.com"
          borderWidth="var(--padding-md)"
          borderOffset="var(--padding-xlg)"
          borderSize="calc(4 * var(--padding-lg))"
        >
          <BoxImage
            imagePath="src/assets/label_blog.bmp"
            hideSurfaces={hideSurfacesLabels}
            cellsColor={labelsColor}
            {...commonLabelsProps}
          />
        </SectionLink>

        <SectionLink
          class="labels-resume"
          href="https://google.com"
          borderWidth="var(--padding-md)"
          borderOffset="var(--padding-xlg)"
          borderSize="calc(4 * var(--padding-lg))"
        >
          <BoxImage
            imagePath="src/assets/label_resume.bmp"
            hideSurfaces={hideSurfacesLabels}
            cellsColor={labelsColor}
            {...commonLabelsProps}
          />
        </SectionLink>
      </div>
    </section>

    <section class="decorations-container">
      <Ficus class="decorations-ficus" />
      <Chair class="decorations-chair" seatColor="var(--seat-color)" frameColor="var(--seat-frame-color)" />
      <Desk
        class="decorations-desk"
        surfaceColor="var(--table-color)"
        frameColor="var(--table-frame-color)"
        height="var(--table-height)"
      />
      <Computer class="decorations-computer" plasticColor="var(--plastic-color)" />
    </section>
  </main>

  <Acknowledgments class="acks" />
</IndexLayout>

<style lang="scss" is:global>
  html,
  body {
    overflow: hidden;
    background: var(--color-surface);
  }
</style>

<style lang="scss">
  @use 'sass:list';

  .acks {
    position: fixed;
    bottom: var(--padding-md);
    z-index: 1;
    right: 0;
    left: 0;
  }

  main {
    --animation-1-delay: 1s;
    --animation-1-duration: 2s;
    --animation-2-delay: calc(var(--animation-1-delay) + var(--animation-1-duration));
    --animation-2-duration: 20s;
    --animation-end-offset-y: calc(-50vh + 20vw);
    --animation-end-offset-x: 20vw;
    --animation-end-offset-z: -40vw;
    --animation-end-rotate-x: -20deg;
    --animation-end-rotate-y: 30deg;
    --animation-start-offset-y: -40vh;
    --rocking-step: 1deg;

    @media (max-width: 460px) or (max-height: 520px) {
      --animation-end-offset-y: calc(-50vh + 30vw);
    }

    height: 100%;
    display: grid;
    place-items: center;
    transform-style: preserve-3d;
    transform-origin: center;
    transform: rotateX(0deg) rotateY(0deg) translateZ(0vw) translateY(var(--animation-start-offset-y));
    animation: var(--animation-1-duration) var(--animation-1-delay) forwards main-rotation var(--animation-curve-base),
      var(--animation-2-duration) var(--animation-2-delay) infinite main-rocking var(--animation-curve-base);

    @keyframes main-rotation {
      0% {
        transform: rotateX(0deg) rotateY(0deg) translateZ(0vw) translateY(var(--animation-start-offset-y));
      }
      100% {
        transform: rotateX(var(--animation-end-rotate-x)) rotateY(var(--animation-end-rotate-y))
          translateZ(var(--animation-end-offset-z)) translateY(var(--animation-end-offset-y))
          translateX(var(--animation-end-offset-x));
      }
    }

    @keyframes main-rocking {
      $pos: [[0, 0], [1, 0], [-1, 1], [1, -1], [1, 1], [-1, -1], [-1, 0], [1, 0], [0, 0]];
      @for $i from 0 through 8 {
        #{$i * 12.5%} {
          $x: list.nth(list.nth($pos, $i + 1), 1);
          $y: list.nth(list.nth($pos, $i + 1), 2);
          transform: rotateX(calc(var(--animation-end-rotate-x) + $x * var(--rocking-step)))
            rotateY(calc(var(--animation-end-rotate-y) + $y * var(--rocking-step)))
            translateZ(var(--animation-end-offset-z))
            translateY(var(--animation-end-offset-y))
            translateX(var(--animation-end-offset-x));
        }
      }
    }

    .main-wall {
      position: absolute;
      height: 200vh;
      width: 200vw;
      left: -50vw;
      top: -100vh;

      &-vertical {
        background: var(--color-surface);
      }
      &-horizontal {
        transform-origin: center bottom;
        transform: rotateY(180deg) rotateX(90deg);
        background: linear-gradient(var(--color-surface), var(--color-surface) 90%, var(--color-background));
      }
    }

    .labels {
      &-container {
        --labels-size: 16px;
        --labels-offset: 100px;
        --labels-shadow-color: rgba(0, 0, 0, 0.1);

        transform-style: preserve-3d;
        transform: translateZ(calc(var(--labels-size) / 2))
          translateY(calc(50vh - 50% - var(--padding-xlg) - var(--padding-sm)));

        @media (prefers-color-scheme: dark) {
          --labels-shadow-color: rgba(255, 255, 255, 0.1);
        }

        @media (max-width: 768px) or (max-height: 600px) {
          --labels-size: 12px;
          --labels-offset: 50px;
        }
        @media (max-width: 460px) or (max-height: 460px) {
          --labels-size: 10px;
          --labels-offset: 0px;
        }
        @media (max-width: 280px) {
          --labels-size: 8px;
          --labels-offset: 0px;
        }

        h1 {
          margin-bottom: var(--padding-lg);
        }
      }

      &-shadows,
      &-links {
        display: flex;
        flex-flow: column;
        align-items: flex-start;
        transform-style: preserve-3d;
        position: relative;
        gap: var(--padding-lg);
      }

      &-shadows {
        position: absolute;
      }

      &-blog {
        transform: translateZ(var(--labels-offset));
      }

      &-resume {
        transform: translateZ(calc(2 * var(--labels-offset)));
      }
    }

    .decorations {
      &-container {
        --light-overlay-opacity: 0.15;

        --base-offset-x: 200px;
        --base-offset-z: 600px;
        --base-rotate-y: 0deg;

        @media (max-width: 850px) {
          --base-offset-x: 50px;
          --base-offset-z: 650px;
        }
        @media (max-width: 650px) {
          --base-offset-x: 240px;
          --base-rotate-y: -30deg;
        }

        @media (max-height: 810px) {
          --base-offset-z: 500px;
        }

        --seat-color: #dcdcdc;
        --seat-frame-color: #707070;
        --table-color: #aeaeae;
        --table-frame-color: #707070;
        --table-height: 128px;
        --plastic-color: beige;

        @media (prefers-color-scheme: dark) {
          --seat-color: #190b00;
          --seat-frame-color: #212121;
          --table-color: #331c0b;
          --table-frame-color: var(--seat-frame-color);
          --plastic-color: #8b8b74;
        }

        pointer-events: none;
        transform-style: preserve-3d;
        transform: translateZ(100px) rotateY(var(--base-rotate-y));
        position: absolute;
        width: 800px;
        bottom: 0;
      }

      &-ficus {
        position: absolute;
        left: calc(var(--base-offset-x) + 200px);
        bottom: calc(var(--table-height) + 8px);

        transform: translateZ(var(--base-offset-z));
      }

      &-chair {
        position: absolute;
        left: calc(var(--base-offset-x) + 50px);
        bottom: 0;

        transform: translateZ(calc(var(--base-offset-z) + 50px)) rotateY(-180deg);
      }

      &-desk {
        position: absolute;
        left: var(--base-offset-x);
        bottom: 0;

        transform: translateZ(var(--base-offset-z));
      }

      &-computer {
        position: absolute;
        left: calc(var(--base-offset-x) + 75px);
        bottom: calc(var(--table-height) + 4px);

        transform: translateZ(var(--base-offset-z)) translateY(-4px);
      }
    }
  }
</style>
